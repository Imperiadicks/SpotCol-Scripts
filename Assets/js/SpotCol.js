(() => {
  const GH_ROOT = 'https://raw.githubusercontent.com/Imperiadicks/SpotCol-Scripts/main/Assets/';
  const JS_BASE = GH_ROOT + 'js/';
  const CSS_BASE = GH_ROOT + 'css/';

  console.log('SPOTCOL v1.0.6');

  const scripts = [
    'Library.js',
    'colorize 2.js',
    // 'BetterPlayer.js',
    'Main.js',
    'SpotifyScreen.js'
  ];

  const styles = [
    'SpotCol.css',
    'Colorize 2.css',
    'BetterPlayer.css',
    'main.css',
    'navbar.css',
    'SpotifyScreen.css',
    'user.css',
    'Rotating Cover Art.css'
  ];

  async function loadScript(name) {
    const url = JS_BASE + encodeURIComponent(name);
    console.log(`[SpotCol] üì¶ –ó–∞–≥—Ä—É–∂–∞—é JS: ${url}`);
    try {
      const res = await fetch(url);
      if (!res.ok) throw new Error(`HTTP ${res.status}`);
      const code = await res.text();
      const run = Function(code);
      run.call(window);
      console.log(`[SpotCol] ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω: ${name}`);
    } catch (e) {
      console.error(`[SpotCol] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JS: ${name}`, e);
    }
  }

async function loadCss(name) {
  const url = CSS_BASE + encodeURIComponent(name);
  console.log(`[SpotCol] üé® –ó–∞–≥—Ä—É–∂–∞—é CSS: ${url}`);
  try {
    const res = await fetch(url);
    if (!res.ok) throw new Error(`HTTP ${res.status}`);
    const css = await res.text();

    const style = document.createElement('style');
    style.textContent = css;
    document.head.appendChild(style);
    console.log(`[SpotCol] ‚úÖ –ü–æ–¥–∫–ª—é—á—ë–Ω: ${name}`);

    // –ñ–¥—ë–º, –ø–æ–∫–∞ CSS –ø—Ä–∏–º–µ–Ω–∏—Ç—Å—è
    await new Promise(resolve => requestAnimationFrame(resolve));

    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–ª—é—á –≤–∏–¥–∞ --spotcol-css-version
    const key = '--' + name
      .replace(/\.css$/i, '')       // —É–±–∏—Ä–∞–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
      .replace(/[^a-z0-9]/gi, '')   // —É–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã
      .toLowerCase() + '-css-version';

    const version = getComputedStyle(document.documentElement).getPropertyValue(key)?.trim().replace(/^['"]|['"]$/g, '');

    if (version) {
      console.log(`%c[SpotCol] üìò ${name} –≤–µ—Ä—Å–∏—è: ${version}`, 'color: #3498db');
    } else {
      console.log(`%c[SpotCol] ‚ö†Ô∏è ${name} –≤–µ—Ä—Å–∏—è: –Ω–µ —É–∫–∞–∑–∞–Ω–∞`, 'color: #e67e22');
    }
  } catch (e) {
    console.error(`[SpotCol] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSS: ${name}`, e);
  }
}

  (async () => {
    await Promise.all(styles.map(loadCss)); // CSS –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    for (const script of scripts) await loadScript(script); // JS –ø–æ –æ—á–µ—Ä–µ–¥–∏
    console.log('[SpotCol] üü¢ –í—Å–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã');
  })();
})();

(() => {
  const GH_ROOT = 'https://raw.githubusercontent.com/Imperiadicks/SpotCol-Scripts/main/Assets/';
  const JS_BASE = GH_ROOT + 'js/';
  const CSS_BASE = GH_ROOT + 'css/';

  console.log('SPOTCOL v1.1.0');

  const scripts = [
    'Library.js',
    'colorize 2.js',
    // 'BetterPlayer.js',
    'Main.js',
    'SpotifyScreen.js'
  ];

  const styles = [
    'SpotCol.css',
    'Colorize 2.css',
    'BetterPlayer.css',
    'main.css',
    'navbar.css',
    'SpotifyScreen.css',
    'user.css',
    'Rotating Cover Art.css'
  ];

  async function loadScript(name) {
    const url = JS_BASE + encodeURIComponent(name);
    console.log(`[SpotCol] üì¶ –ó–∞–≥—Ä—É–∂–∞—é JS: ${url}`);
    try {
      const res = await fetch(url);
      if (!res.ok) throw new Error(`HTTP ${res.status}`);
      const code = await res.text();
      const run = Function(code);
      run.call(window);
      console.log(`[SpotCol] ‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω: ${name}`);
    } catch (e) {
      console.error(`[SpotCol] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ JS: ${name}`, e);
    }
  }

  async function loadCss(name) {
  const url = CSS_BASE + encodeURIComponent(name);
  console.log(`[SpotCol] üé® –ó–∞–≥—Ä—É–∂–∞—é CSS: ${url}`);
  try {
    const res = await fetch(url);
    if (!res.ok) throw new Error(`HTTP ${res.status}`);
    const css = await res.text();

    // –û–±–æ—Ä–∞—á–∏–≤–∞–µ–º CSS –≤ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –∫–ª–∞—Å—Å–æ–º –¥–ª—è –∏–∑–æ–ª—è—Ü–∏–∏
    const id = `css-${name.replace(/[^a-z0-9]/gi, '-')}`;
    const scoped = `:root.${id} { ${css.match(/--css-version:.*?;/)?.[0] || ''} }`;

    // –í—Å—Ç–∞–≤–∫–∞ —Ä–µ–∞–ª—å–Ω–æ–≥–æ CSS
    const style = document.createElement('style');
    style.textContent = css;
    document.head.appendChild(style);

    // –í—Å—Ç–∞–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏
    const testEl = document.createElement('div');
    testEl.className = id;
    document.body.appendChild(testEl);

    // –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞
    requestAnimationFrame(() => {
      const version = getComputedStyle(testEl).getPropertyValue('--css-version')?.trim().replace(/^['"]|['"]$/g, '');
      console.log(`[SpotCol] üìò ${name} –≤–µ—Ä—Å–∏—è: ${version || '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}`);
      testEl.remove();
    });

    console.log(`[SpotCol] ‚úÖ –ü–æ–¥–∫–ª—é—á—ë–Ω: ${name}`);
  } catch (e) {
    console.error(`[SpotCol] ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSS: ${name}`, e);
  }
}

  (async () => {
    await Promise.all(styles.map(loadCss));
    for (const script of scripts) await loadScript(script);
    console.log('[SpotCol] üü¢ –í—Å–µ –º–æ–¥—É–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω—ã');
  })();
})();
